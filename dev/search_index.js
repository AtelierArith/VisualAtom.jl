var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = VisualAtom","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [VisualAtom]","category":"page"},{"location":"api/#VisualAtom.PERM","page":"API","title":"VisualAtom.PERM","text":"https://github.com/caseman/noise/blob/bb32991ab97e90882d0e46e578060717c5b90dc5/_noise.h#L29-L61\n\n\n\n\n\n","category":"constant"},{"location":"api/#VisualAtom.Atom","page":"API","title":"VisualAtom.Atom","text":"Atom(config::Config)\nAtom([rng=GLOBAL_RNG], config::Config)\n\nAtom struct representing the data structure proposed in Visual Atoms: Pre-training Vision Transformers with Sinusoidal Waves.\n\nArguments\n\nconfig::Config: A configuration object containing the parameter ranges.\n\nReturns\n\nAtom: A new Atom instance with randomly generated properties.\n\n\n\n\n\n","category":"type"},{"location":"api/#VisualAtom.Atom-Tuple{Random.AbstractRNG, VisualAtom.Config}","page":"API","title":"VisualAtom.Atom","text":"Atom(rng::AbstractRNG, config::Config)\n\nArguments\n\nrng::AbstractRNG: The random number generator to be used.\nconfig::Config: A configuration object containing the parameter ranges.\n\nReturns\n\nAtom: A new Atom instance with randomly generated properties.\n\n\n\n\n\n","category":"method"},{"location":"api/#VisualAtom.Config","page":"API","title":"VisualAtom.Config","text":"Config\n\nA struct representing the configuration for generating atom instances and images.\n\n\n\n\n\n","category":"type"},{"location":"api/#VisualAtom.Config-Tuple{AbstractString}","page":"API","title":"VisualAtom.Config","text":"Config(config_path::AbstractString)\n\nCreate a new Config instance by reading and parsing the configuration file at the specified config_path.\n\nArguments\n\nconfig_path::AbstractString: Path to the configuration file (TOML format).\n\nReturns\n\nConfig: A new Config instance with properties read from the configuration file.\n\n\n\n\n\n","category":"method"},{"location":"api/#VisualAtom.generate_instances-Tuple{VisualAtom.Config}","page":"API","title":"VisualAtom.generate_instances","text":"generate_instances(config::Config; save_root::AbstractString, category_id::Int, num_instances::Int)\n\nGenerate instances of Atom images based on the configuration object andsave them to the specified directory. The images will be saved in a subdirectory named after the category ID.\n\nArguments\n\nconfig::Config: The configuration object containing parameter ranges for the Atom generation.\nsave_root::AbstractString: The root directory where the images will be saved.\ncategory_id::Int: The category ID, used for generating the seed and naming the output subdirectory.\nnum_instances::Int: The number of instances (images) to generate and save.\n\nReturns\n\nThis function does not return a value; it saves generated images to the specified directory.\n\n\n\n\n\n","category":"method"},{"location":"api/#VisualAtom.pnoise1-Tuple{Float32}","page":"API","title":"VisualAtom.pnoise1","text":"pnoise1(x)\n\nPerlin noise – pure Julia implementation. The results of this computation are consistent with the Python package's noise.pnoise1 function.\n\n\n\n\n\n","category":"method"},{"location":"api/#VisualAtom.render!-Tuple{Random.AbstractRNG, VisualAtom.Atom, AbstractMatrix}","page":"API","title":"VisualAtom.render!","text":"render!(rng::AbstractRNG, atom::Atom, canvas::AbstractMatrix)\n\nRender an atom onto a canvas, modifying the canvas in-place. The atom's properties and a random number generator are used to generate the image.\n\nArguments\n\nrng::AbstractRNG: The random number generator to be used.\natom::Atom: The atom instance with properties defining its appearance.\ncanvas::AbstractMatrix: The canvas (matrix of color values) onto which the atom will be rendered.\n\nReturns\n\ncanvas::AbstractMatrix: The modified canvas with the rendered atom.\n\n\n\n\n\n","category":"method"},{"location":"api/#VisualAtom.save_images-Tuple{Random.AbstractRNG, VisualAtom.Atom}","page":"API","title":"VisualAtom.save_images","text":"save_images(rng::AbstractRNG, atom::Atom; save_dir::AbstractString, num_instances::Int, H::Int, W::Int)\n\nRender and save images of the Atom instance atom onto a canvas with specified dimensions. The images will be saved in the specified directory.\n\nArguments\n\nrng::AbstractRNG: The random number generator to be used.\natom::Atom: The atom instance with properties defining its appearance.\nsave_dir::AbstractString: The directory where the images will be saved.\nnum_instances::Int: The number of instances (images) to generate and save.\nH::Int: The height of the canvas.\nW::Int: The width of the canvas.\n\nReturns\n\nThis function does not return a value; it saves generated images to the specified directory.\n\n\n\n\n\n","category":"method"},{"location":"api/#VisualAtom.uniform-Union{Tuple{T}, Tuple{Random.AbstractRNG, T, T}} where T<:AbstractFloat","page":"API","title":"VisualAtom.uniform","text":"uniform([rng=GLOBAL_RNG], a::T, b::T) where {T<:AbstractFloat}\nuniform([rng=GLOBAL_RNG], a::Real, b::Real)\n\nGenerate a random number in the interval [a, b), uniformly distributed, using the provided random number generator rng. The arguments a and b must be of the same subtype of AbstractFloat.\n\nArguments\n\nrng::AbstractRNG: The random number generator to be used.\na::T: The lower bound of the interval (inclusive).\nb::T: The upper bound of the interval (exclusive).\n\nReturns\n\nT: A random number in the interval [a, b).\n\n\n\n\n\n","category":"method"},{"location":"#VisualAtom","page":"Home","title":"VisualAtom","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VisualAtom.","category":"page"},{"location":"","page":"Home","title":"Home","text":"⚠ This implementation is unofficial. ⚠","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repository contains Julia implementation of visual_atomic_renderer/render_VisualAtom.py, originally implemented in Python. The original Python implementation can be found at masora1030/CVPR2023-FDSL-on-VisualAtom","category":"page"},{"location":"#How-to-use","page":"Home","title":"How to use","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"$ git clone https://github.com/AtelierArith/VisualAtom.jl.git\n$ cd VisualAtom.jl\n$ make\n$ docker compose run --rm shell julia --procs auto run.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"That's it. You'll get VisualAtom_dataset directory within an hour.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img width=\"860\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16760547/235294665-b988f394-cc48-4bfe-ae7b-845af8cda9cd.png\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also use the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ docker compose run --rm shell julia --threads auto run_mt.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"See README.md to learn more.","category":"page"}]
}
